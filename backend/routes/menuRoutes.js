const express = require("express");
const router = express.Router();
const Menu = require("../models/Menu");
const Shop = require("../models/Shop");

const { v2: cloudinary } = require("cloudinary");

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || "",
  api_key: process.env.CLOUDINARY_API_KEY || "",
  api_secret: process.env.CLOUDINARY_API_SECRET || "",
})


router.post("/", async (req, res) => {
  const { name, price, shop, image } = req.body;

  try {
    const newMenu = new Menu({ name, price, shop, image });
    await newMenu.save();

    // üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢
    await Shop.findByIdAndUpdate(shop, {
      $push: { menus: newMenu._id }
    });

    res.json(newMenu);
  } catch (err) {
    console.error("Error creating menu:", err);
    res.status(500).json({ message: "Server error" });
  }
});

router.get("/", async (req, res) => {
  try {
    const menus = await Menu.find();
    res.json(menus);
  } catch (err) {
    console.error("Error fetching menus", err);
    res.status(500).json({ message: "Server error" });
  }
})

// GET all menus by shopId
router.get("/by-shop/:shopId", async (req, res) => {
  try {
    const { shopId } = req.params;
    const menus = await Menu.find({ shop: shopId });
    res.json(menus);
  } catch (err) {
    console.error("Error fetching menus by shopId:", err);
    res.status(500).json({ message: "Server error" });
  }
});

// ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å id
router.get("/:id", async (req, res) => {
  try {
    const menu = await Menu.findById(req.params.id);
    res.json(menu);
  } catch (err) {
    res.status(500).json({ message: "Error fetching menu" });
  }
});

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π
router.patch("/:id", async (req, res) => {
  try {
    const updated = await Menu.findByIdAndUpdate(req.params.id, req.body, {
      new: true
    });
    res.json(updated);
  } catch (err) {
    res.status(500).json({ message: "Error updating menu" });
  }
});

router.delete("/:id", async (req, res) => {
  const menuId = req.params.id;

  try {
    const menu = await Menu.findById(menuId);
    if (!menu) return res.status(404).json({ message: "Menu not found" });

    // üî• ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Cloudinary ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (menu.image && menu.image.includes("res.cloudinary.com")) {
      const segments = menu.image.split("/");
      const filename = segments.pop().split(".")[0]; // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏ä‡πà‡∏ô abc123.jpg ‚Üí abc123
      const folder = "menus"; // ‡∏´‡∏£‡∏∑‡∏≠ folder ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      const publicId = `${folder}/${filename}`;

      await cloudinary.uploader.destroy(publicId);
    }

    // ‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await Menu.findByIdAndDelete(menuId);

    // ‡∏•‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô
    await Shop.findByIdAndUpdate(menu.shop, {
      $pull: { menus: menuId },
    });

    res.json({ message: "‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("Error deleting menu:", err);
    res.status(500).json({ message: "Server error" });
  }
});


module.exports = router;
